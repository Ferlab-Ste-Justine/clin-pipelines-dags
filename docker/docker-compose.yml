version: '3.8'
services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  scheduler:
    image: apache/airflow:1.10.12-python3.7
    command: scheduler
    restart: on-failure:3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    depends_on:
      - postgres
    env_file:
      - .envvars
    volumes:
      - ../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./kubeconfig/config:/home/airflow/.kube/config
      - ./kubeconfig/ca.crt:/home/airflow/.kube/ca.crt
      - ./kubeconfig/client.crt:/home/airflow/.kube/client.crt
      - ./kubeconfig/client.key:/home/airflow/.kube/client.key

  webserver:
    image: apache/airflow:1.10.12-python3.7
    entrypoint: ./scripts/entrypoint.sh
    restart: on-failure:3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    depends_on:
      - postgres
      - scheduler
    env_file:
      - .envvars
    volumes:
      - ../dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8080:8080"

  minio1:
    image: minio/minio
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...2}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    expose:
      - "9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...2}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:1.19.2-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
    depends_on:
      - minio1
      - minio2

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.1
#    container_name: elasticsearch
#    environment:
#      - xpack.security.enabled=false
#      - discovery.type=single-node
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      nofile:
#        soft: 65536
#        hard: 65536
#    cap_add:
#      - IPC_LOCK
#    volumes:
#      - ./esdata:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#      - 9300:9300
#
#  clin-fhir-server:
#    image: chusj/clin-fhir-server:7d13496
#    environment:
#      HAPI_DATASOURCE_DRIVER: "org.postgresql.Driver"
#      HAPI_DATASOURCE_URL: "jdbc:postgresql://clin-fhir-server-postgres:5432/hapi"
#      HAPI_HIBERNATE_DIALECT: "org.hibernate.dialect.PostgreSQL95Dialect"
#      HAPI_DATASOURCE_USERNAME: "admin"
#      HAPI_DATASOURCE_PASSWORD: "admin"
#      HAPI_AUTH_SERVER_URL: "https://auth.qa.cqdg.ferlab.bio"
#      HAPI_AUTH_REALM: "clin"
#      HAPI_DISABLE_SSL_VALIDATION: "false"
#      HAPI_SERVER_ADDRESS: "http://localhost:8080/hapi-fhir-jpaserver/"
#      JAVA_OPTS: "-server -Xmx1024m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -XX:+UseContainerSupport"
#    ports:
#      - "9080:8080"
#
#  clin-fhir-server-postgres:
#    image: postgres
#    deploy:
#      mode: replicated
#      replicas: 1
#    environment:
#      POSTGRES_DB: 'hapi'
#      POSTGRES_USER: 'admin'
#      POSTGRES_PASSWORD: 'admin'
#    command: -c 'shared_buffers=256MB' -c 'work_mem=4MB' -c 'maintenance_work_mem=64MB' -c 'max_worker_processes=8'
#    volumes:
#      - clin-fhir-postgres:/var/lib/postgresql/data

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  clin-fhir-postgres:
  data1-1:
  data1-2:
  data2-1:
  data2-2: